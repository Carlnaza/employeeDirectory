{"version":3,"sources":["components/Form/Form.js","components/EmployeeCard/EmployeeCard.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","name","value","formValue","first_name","onChange","inputChange","onClick","formSubmit","EmployeeCard","empInfo","username","last_name","email","employeeList","App","state","password","fname","lname","uname","em","pwd","handleInputChange","event","setState","target","handleFormSubmit","preventDefault","this","map","info","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qxPA2BeA,G,MAxBF,SAAAC,GACL,OACI,yBAAKC,UAAU,qEACX,wBAAIA,UAAU,4DAAd,8BACA,8BACI,4BACIA,UAAU,6BACVC,KAAK,aACLC,MAAOH,EAAMI,UAAUC,WACvBC,SAAUN,EAAMO,aAEhB,8CACA,2CAEJ,4BACIN,UAAU,gFACVO,QAASR,EAAMS,YAFnB,cCLLC,EAVM,SAAAV,GACjB,OACI,yBAAKC,UAAU,mJACX,wBAAIA,UAAU,+EAA+ED,EAAMW,QAAQC,UAC3G,qCAAOZ,EAAMW,QAAQN,WAAa,IAAML,EAAMW,QAAQE,YACtD,uBAAGZ,UAAU,oBAAoBD,EAAMW,QAAQG,SCFrDC,E,KA0DSC,E,2MAtDbC,MAAQ,CACNZ,WAAY,IACZQ,UAAW,IACXD,SAAU,IACVE,MAAO,IACPI,SAAU,IACVC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,GAAI,IACJC,IAAK,K,EAGPC,kBAAoB,SAAAC,GAClB,EAAKC,SAAL,eAAiBD,EAAME,OAAOzB,KAAOuB,EAAME,OAAOxB,S,EAGpDyB,iBAAmB,SAAAH,GACjBA,EAAMI,iBACN,EAAKH,SAAS,CACZP,MAAO,EAAKF,MAAMZ,WAClBe,MAAO,EAAKH,MAAMJ,UAClBQ,MAAO,EAAKJ,MAAML,SAClBU,GAAI,EAAKL,MAAMH,MACfS,IAAK,EAAKN,MAAMC,SAChBb,WAAY,IACZQ,UAAW,IACXD,SAAU,IACVE,MAAO,IACPI,SAAU,O,wEAKZ,OACE,oCACE,yBAAKjB,UAAU,0BACb,kBAAC,EAAD,CACEG,UAAW0B,KAAKb,MAChBV,YAAauB,KAAKN,kBAClBf,WAAYqB,KAAKF,oBAGrB,6BACE,wBAAI3B,UAAU,8CAAd,qBACE,4BACGc,EAAagB,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAcrB,QAASqB,c,GAhD7CC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac9ce21c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './form.css'\r\n\r\nconst Form = props => {\r\n        return (\r\n            <div className=\"uk-card uk-card-body uk-width-1-3@l uk-width-1-3@m uk-width-1-1@s\" >\r\n                <h1 className=\"uk-text-header uk-text-muted uk-text-large uk-text-light\">Enter Employee Information</h1>\r\n                <form >\r\n                    <select\r\n                        className=\"uk-select hw-border-radius\"\r\n                        name=\"first_name\"\r\n                        value={props.formValue.first_name}\r\n                        onChange={props.inputChange}\r\n                    >\r\n                        <option>Department</option>\r\n                        <option>Gender</option>\r\n                    </select>\r\n                    <button \r\n                        className=\"uk-button uk-button-primary hw-border-radius uk-margin-small-top uk-width-1-1\"\r\n                        onClick={props.formSubmit}\r\n                        >Submit\r\n                        </button>\r\n                </form>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst EmployeeCard = props => {\r\n    return (\r\n        <div className=\"uk-inline-flex uk-card uk-card-default uk-card-body uk-width-1-6@l uk-width-1-4@m uk-width-1-1@s uk-margin-left uk-margin-right uk-margin-small\">\r\n            <h3 className=\"uk-card-title uk-margin-small-left uk-margin-small-right uk-text-capitalize\">{props.empInfo.username}</h3>\r\n            <p>{`${props.empInfo.first_name + ' ' + props.empInfo.last_name}`}</p>\r\n            <p className=\"uk-text-truncate\">{props.empInfo.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeCard","import React, { Component } from 'react';\nimport Form from './components/Form'\nimport EmployeeCard from './components/EmployeeCard'\nimport employeeJSON from './db/employees.json'\n\nconst employeeList = employeeJSON\n\nclass App extends Component {\n\n  state = {\n    first_name: ' ', \n    last_name: ' ',\n    username: ' ',\n    email: ' ',\n    password: ' ',\n    fname: ' ',\n    lname: ' ',\n    uname: ' ',\n    em: ' ',\n    pwd: ' '\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault()\n    this.setState({\n      fname: this.state.first_name,\n      lname: this.state.last_name,\n      uname: this.state.username,\n      em: this.state.email,\n      pwd: this.state.password,\n      first_name: ' ',\n      last_name: ' ',\n      username: ' ',\n      email: ' ',\n      password: ' '\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"uk-flex uk-flex-center\">\n          <Form\n            formValue={this.state}\n            inputChange={this.handleInputChange}\n            formSubmit={this.handleFormSubmit}\n          />\n        </div>\n        <div>\n          <h2 className=\"uk-text-muted uk-text-center uk-text-light\">Current Employees</h2>\n            <ul>\n              {employeeList.map(info => <EmployeeCard empInfo={info} />)}\n            </ul>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}