{"version":3,"sources":["components/EmployeeCard/EmployeeCard.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","emp","department","first_name","last_name","email","country","Form","htmlFor","type","name","value","input","onChange","handleInputChange","handleSelectChange","onClick","handleFormSubmit","App","state","searchInp","category","categorySel","event","setState","target","preventDefault","console","log","newCat","toLowerCase","cat","this","db","map","i","key","renderEmployees","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+8NAaeA,EAXM,SAAAC,GACjB,OACI,yBAAKC,UAAU,mJACX,0CAAgBD,EAAME,IAAIC,YAC1B,8CAAaH,EAAME,IAAIE,WAAa,IAAMJ,EAAME,IAAIG,YACpD,qCAAWL,EAAME,IAAII,OACrB,uCAAaN,EAAME,IAAIK,WCqBpBC,G,MA1BF,SAAAR,GACT,OACI,yBAAKC,UAAU,qEACX,wBAAIA,UAAU,4DAAd,wBACA,8BACI,2BAAOQ,QAAQ,SAAf,mBACA,2BACIC,KAAK,OACLT,UAAU,4BACVU,KAAK,QACLC,MAAOZ,EAAMa,MACbC,SAAUd,EAAMe,oBAEpB,4BACId,UAAU,iDACVa,SAAUd,EAAMgB,oBAEhB,2CACA,+CAEJ,4BAAQf,UAAU,mEAAmEgB,QAASjB,EAAMkB,kBAApG,c,OC6CDC,E,2MA7DbC,MAAQ,CACNC,UAAW,GACXR,MAAO,GACPS,SAAU,UACVC,YAAa,I,EAGfR,kBAAoB,SAAAS,GAClB,EAAKC,SAAL,eAAiBD,EAAME,OAAOf,KAAOa,EAAME,OAAOd,S,EAGpDM,iBAAmB,SAAAM,GACjBA,EAAMG,iBACNC,QAAQC,IAAI,EAAKT,MAAMP,OACvB,EAAKY,SAAS,CAAEJ,UAAW,EAAKD,MAAMP,MAAOA,MAAO,GAAIS,SAAU,GAAIC,YAAa,EAAKH,MAAME,Y,EAGhGN,mBAAqB,SAAAQ,GACnB,IAAIM,EAASN,EAAME,OAAOd,MAC1B,EAAKa,SAAS,CAAEH,SAAUQ,EAAOC,iB,+EAGnBC,GAAM,IAAD,OACnB,MAA6B,KAAzBC,KAAKb,MAAMC,UAENa,EAAGC,KAAI,SAACjC,EAAKkC,GAClB,GAAY,eAARJ,GACF,GAAI9B,EAAIC,aAAe,EAAKiB,MAAMC,UAChC,OAAO,kBAAC,EAAD,CAAMnB,IAAKA,EAAKmC,IAAKD,SAG9B,GAAIlC,EAAIK,UAAY,EAAKa,MAAMC,UAC7B,OAAO,kBAAC,EAAD,CAAMnB,IAAKA,EAAKmC,IAAKD,OAK3BF,EAAGC,KAAI,SAACjC,EAAKkC,GAAN,OAAY,kBAAC,EAAD,CAAMlC,IAAKA,EAAKmC,IAAKD,S,+BAMjD,OACE,oCACE,yBAAKnC,UAAU,gBACb,kBAAC,EAAD,CACEY,MAAOoB,KAAKb,MAAMP,MAClBE,kBAAmBkB,KAAKlB,kBACxBG,iBAAkBe,KAAKf,iBACvBF,mBAAoBiB,KAAKjB,qBAE3B,yBAAKf,UAAU,yCACZgC,KAAKK,gBAAgBL,KAAKb,MAAMG,oB,GAvD3BgB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.92522517.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst EmployeeCard = props => {\r\n    return (\r\n        <div className=\"uk-inline-flex uk-card uk-card-default uk-card-body uk-width-1-4@l uk-width-1-4@m uk-width-1-1@s uk-margin-left uk-margin-right uk-margin-small\">\r\n            <p>Department: {props.emp.department}</p>\r\n            <p>Name: {`${props.emp.first_name + ' ' + props.emp.last_name}`}</p>\r\n            <p>Email: {props.emp.email}</p>\r\n            <p>Country: {props.emp.country}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeCard","import React from 'react'\r\nimport './form.css'\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"uk-card uk-card-body uk-width-1-3@l uk-width-1-3@m uk-width-1-1@s\" >\r\n            <h1 className=\"uk-text-header uk-text-muted uk-text-large uk-text-light\">Search by Department</h1>\r\n            <form >\r\n                <label htmlFor=\"input\">Employee Search</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"uk-input hw-border-radius\"\r\n                    name=\"input\"\r\n                    value={props.input}\r\n                    onChange={props.handleInputChange}\r\n                />\r\n                <select\r\n                    className=\"uk-select uk-margin-small-top hw-border-radius\"\r\n                    onChange={props.handleSelectChange}\r\n                >\r\n                    <option>Country</option>\r\n                    <option>Department</option>\r\n                </select>\r\n                <button className=\"uk-button uk-button-primary uk-margin-small-top hw-border-radius\" onClick={props.handleFormSubmit}>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport Card from './components/EmployeeCard';\nimport Form from './components/Form'\nimport db from './db/db.json';\n\nclass App extends Component {\n\n  state = {\n    searchInp: '',\n    input: '',\n    category: 'country',\n    categorySel: ''\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault()\n    console.log(this.state.input)\n    this.setState({ searchInp: this.state.input, input: '', category: '', categorySel: this.state.category })\n  }\n\n  handleSelectChange = event => {\n    let newCat = event.target.value\n    this.setState({ category: newCat.toLowerCase() })\n  }\n\n  renderEmployees(cat) {\n    if (this.state.searchInp !== '') {\n      // eslint-disable-next-line\n      return db.map((emp, i) => {\n        if (cat === 'department') {\n          if (emp.department === this.state.searchInp) {\n            return <Card emp={emp} key={i} />\n          }\n        } else {\n          if (emp.country === this.state.searchInp) {\n            return <Card emp={emp} key={i} />\n          }\n        }\n      })\n    } else {\n      return db.map((emp, i) => <Card emp={emp} key={i} />)\n    }\n  }\n\n  render() {\n\n    return (\n      <>\n        <div className=\"uk-container\">\n          <Form\n            input={this.state.input}\n            handleInputChange={this.handleInputChange}\n            handleFormSubmit={this.handleFormSubmit}\n            handleSelectChange={this.handleSelectChange}\n          />\n          <div className=\"uk-row uk-margin-top uk-margin-bottom\">\n            {this.renderEmployees(this.state.categorySel)}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}